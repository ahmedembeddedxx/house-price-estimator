correct_dependency_ids: {}
modules: []
exported_table_schema: []
services:
- source: /runtime/services/tables.yml
  client_config: {}
  server_config: {}
forms:
- is_package: true
  container:
    type: HtmlTemplate
    properties: {html: '@theme:standard-page.html', background: 'theme:Primary 700',
      border: black, foreground: ''}
  components:
  - type: ColumnPanel
    properties: {}
    name: content_panel
    layout_properties: {slot: default}
    components:
    - name: label_2
      properties: {text: ENTER YOUR HOUSE SPECS, foreground: white, font: monospace,
        bold: true, font_size: 18}
      type: Label
      layout_properties: {grid_position: 'FSRWLA,XKPJXR'}
    - name: card_1
      properties: {role: card}
      type: ColumnPanel
      layout_properties: {grid_position: 'JXENYJ,IGJRQB'}
      components:
      - name: box1
        properties: {placeholder: Rooms (1-15), text: '', font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'YRBRTC,WIZBBR'}
      - name: box2
        properties: {placeholder: Bathrooms (1-7), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'DLOYRK,NXKPBZ'}
      - name: box3
        properties: {placeholder: Floors (1-3), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'IAMCVP,XSOFOW'}
      - name: box4
        properties: {placeholder: Condition (1-5), bold: true, font: Monospace}
        type: TextBox
        layout_properties: {grid_position: 'FVMPZH,IQPHAY'}
      - name: box5
        properties: {placeholder: Grade (1-9), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'RFXJAL,ZGFQNZ'}
      - name: box6
        properties: {placeholder: Marla Living (4-30), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'NRDKJV,JHCEYX'}
      - name: box7
        properties: {placeholder: Marla Lot (4-30), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'WDWIYZ,QZXSGB'}
      - name: box8
        properties: {placeholder: Marla Above (4-30), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'QHLZSJ,NCDVMO'}
      - name: box9
        properties: {placeholder: Marla Basement (4-30), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'RGSJRX,GKIDGH'}
      - name: box10
        properties: {placeholder: Year Built (1900-2020), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'RHBMCC,OTZTKY'}
      - name: box11
        properties: {placeholder: Year Renovated (1900-2020), font: Monospace, bold: true}
        type: TextBox
        layout_properties: {grid_position: 'OGMTCU,BZQYOG'}
      - name: map_1
        properties: {height: '500', heading: 1, max_zoom: 20, min_zoom: 11}
        type: GoogleMap
        layout_properties: {grid_position: 'IFDYON,OURHFK'}
        event_bindings: {data_rightclick: map_1_data_rightclick, click: map_1_click,
          dbl_click: map_1_dbl_click}
      - name: box12
        properties: {placeholder: Latitude (Make sure it is range of Lahore), font: Monospace,
          bold: true}
        type: TextBox
        layout_properties: {grid_position: ''}
        data_bindings:
        - {property: border, code: 'self.item['''']', writeback: false}
      - name: box13
        properties: {placeholder: Longitude (Make sure it is range of Lahore), bold: true,
          font: Monospace}
        type: TextBox
        layout_properties: {grid_position: ''}
      - name: button_1
        properties: {text: Estimate Value, background: 'theme:Primary 500', foreground: WHite,
          align: left, bold: true, font: Monospace, font_size: 20}
        type: Button
        layout_properties: {grid_position: 'RKHBAQ,EBISBO'}
        event_bindings: {click: button_1_click}
      - name: message_box
        properties: {text: ' ', font: Monospace, bold: true, font_size: 18}
        type: Label
        layout_properties: {grid_position: 'GEIOHO,EKNPIM'}
    - name: card_2
      properties: {role: card}
      type: ColumnPanel
      layout_properties: {grid_position: 'NRYSOW,BRGXDO'}
      components:
      - name: label_1
        properties: {text: See the Dataset at Kaggle, foreground: 'theme:Primary 700',
          bold: true, font: Monospace, role: null, font_size: 13, italic: false, underline: false}
        type: Label
        layout_properties: {grid_position: 'POWBTU,RTPBYR'}
        event_bindings: {show: label_1_show}
      - name: link_1
        properties: {text: 'https://www.kaggle.com/datasets/ahmedembedded/pakistan-houses-pricing-data-web-scrapped',
          bold: true, font: monospace, font_size: 13, underline: true, tooltip: House Data Set,
          visible: true, url: 'https://www.kaggle.com/datasets/ahmedembedded/pakistan-houses-pricing-data-web-scrapped'}
        type: Link
        layout_properties: {grid_position: ''}
        components: []
        event_bindings: {click: link_1_click}
      - name: label_1_copy_2
        properties: {text: Contribute to our project, foreground: 'theme:Primary 700',
          bold: true, font: Monospace, role: null, font_size: 13, italic: false, underline: false}
        type: Label
        layout_properties: {grid_position: 'JZZBZU,IDJKTO'}
        event_bindings: {show: label_1_show}
      - name: link_1_copy
        properties: {text: 'https://github.com/ahmedembeddedx/Housing_Data_Predictive_Model',
          bold: true, font: monospace, font_size: 13, underline: true, tooltip: Github Repository,
          url: 'https://github.com/ahmedembeddedx/Housing_Data_Predictive_Model'}
        type: Link
        layout_properties: {grid_position: 'PEIHGC,YQZKKN'}
        event_bindings: {}
        data_bindings: []
  - type: FlowPanel
    properties: {}
    name: navbar_links
    layout_properties: {slot: nav-right}
    components:
    - name: label_1_copy
      properties: {text: Based on Lahore Real Estate Landscape, font: Monospace, bold: true,
        font_size: 14, italic: false}
      type: Label
  - name: headline_1
    properties: {role: headline, text: 'HOUSE PRICE ESTIMATOR

        ', bold: true, font: Monospace, spacing_above: large}
    type: Label
    layout_properties: {slot: title}
  - name: column_panel_1
    properties: {}
    type: ColumnPanel
    layout_properties: {slot: left-nav}
    components:
    - name: link_2
      properties: {text: GitHub, bold: true, align: left, foreground: 'theme:Primary
          700', url: 'https://github.com/ahmedembeddedx/', font: Monospace, font_size: 20}
      type: Link
      layout_properties: {grid_position: 'TEZTHY,FRDYSE'}
    - name: link_3
      properties: {text: StackOverflow, bold: true, align: left, foreground: 'theme:Primary
          700', url: 'https://stackoverflow.com/users/22690687/ahmedembedded', font: Monospace,
        font_size: 20}
      type: Link
      layout_properties: {grid_position: 'XCPRCP,HWLKMO'}
    - name: link_4
      properties: {text: Linkedin, bold: true, align: left, foreground: 'theme:Primary
          700', url: 'https://www.linkedin.com/in/ahmedembedded/', font: Monospace,
        font_size: 20}
      type: Link
      layout_properties: {grid_position: 'DQEKPY,JZWPDZ'}
    - name: link_5
      properties: {text: Email, align: left, bold: true, foreground: 'theme:Primary
          700', url: 'mailto:business.ahmadabdullah@gmail.com', font: Monospace, font_size: 20}
      type: Link
      layout_properties: {grid_position: 'NOKBVY,HAZSOV'}
  code: "import anvil.server\nfrom ._anvil_designer import MenuTemplate\nfrom anvil\
    \ import *\n\nclass Menu(MenuTemplate):\n    def __init__(self, **properties):\n\
    \        # Set Form properties and Data Bindings.\n        self.init_components(**properties)\n\
    \        self.map_1.center = GoogleMap.LatLng(31.49, 74.309)\n        self.map_1.zoom\
    \ = 13\n        # Any code you write here will run before the form opens.\n  \
    \  \n      \n    def button_1_click(self, **event_args):\n        \"\"\"This method\
    \ is called when the button is clicked\"\"\"\n        try:\n            input_data\
    \ = {\n                'floors': int(self.box3.text),\n                'bedrooms':\
    \ int(self.box1.text),\n                'bathrooms': int(self.box2.text),\n  \
    \              'grade': int(self.box5.text),\n                'condition': int(self.box4.text),\n\
    \                'sqft_living': int(self.box6.text)*272,\n                'sqft_lot':\
    \ int(self.box7.text)*272,\n                'sqft_above': int(self.box8.text)*272,\n\
    \                'sqft_basement': int(self.box9.text)*272,\n                'yr_built':\
    \ int(self.box10.text),\n                'yr_renovated': int(self.box11.text),\n\
    \                'lat': round(float(self.box12.text)),  # Corrected: Use float\
    \ for latitude and longitude\n                'long': round(float(self.box13.text)),\n\
    \                'sqft_living15': int(self.box6.text)*272,\n                'sqft_lot15':\
    \ int(self.box7.text)*272 \n            }\n        except ValueError:\n      \
    \      self.message_box.text = \"Error: Incomplete Data / Not Valid.\"\n     \
    \       return\n\n        # Check if input values are within the specified ranges\n\
    \        label_ranges = {\n            'bedrooms': (1, 15, 1),\n            'bathrooms':\
    \ (1, 12, 1),\n            'floors': (1, 3, 1),\n            'condition': (1,\
    \ 5, 1),\n            'grade': (1, 9, 1),\n            'sqft_living': (1000, 8500,\
    \ 1),\n            'sqft_lot': (1000, 8500, 1),\n            'sqft_above': (1000,\
    \ 8500, 1),\n            'sqft_basement': (1000, 8500, 1),\n            'yr_built':\
    \ (1900, 2020, 1),\n            'yr_renovated': (1900, 2020, 1),\n           \
    \ 'lat': (30, 37, 1),\n            'long': (74, 76, 1),\n            'sqft_living15':\
    \ (1000, 8500, 1),\n            'sqft_lot15': (1000, 8500, 1)\n        }\n   \
    \     \n\n        for key, (lower, upper, step) in label_ranges.items():\n   \
    \         value = input_data.get(key, None)  # Corrected: Use get method to handle\
    \ missing keys\n            if value is None or value < lower or value > upper\
    \ or (value - lower) % step != 0:\n                self.message_box.text = f\"\
    Error: {key} is out of range or not valid.\"\n                return\n\n     \
    \   x = anvil.server.call(\"pred_val\", input_data)\n        self.message_box.text\
    \ = x\n      \n\n    def link_1_click(self, **event_args):\n      \"\"\"This method\
    \ is called when the link is clicked\"\"\"\n      pass\n\n    def drop_down_1_change(self,\
    \ **event_args):\n        \"\"\"This method is called when an item is selected\"\
    \"\"\n        pass\n\n    def map_1_data_rightclick(self, feature, lat_lng, **event_args):\n\
    \      lat_lng=36, 74\n      \n      \"\"\"This method is called for a right-click\
    \ on the geometry.\"\"\"\n      pass\n\n    def map_1_click(self, lat_lng, pixel,\
    \ **event_args):\n      latitude = round(lat_lng.lat(), 3)\n      longitude =\
    \ round(lat_lng.lng(), 3)\n    \n      self.box12.text, self.box13.text = str(latitude),\
    \ str(longitude)\n    \n      \"\"\"This method is called when the user clicks\
    \ on the map.\"\"\"\n      pass\n\n    def label_1_show(self, **event_args):\n\
    \      \"\"\"This method is called when the Label is shown on the screen\"\"\"\
    \n      pass\n\n    def map_1_dbl_click(self, lat_lng, pixel, **event_args):\n\
    \      \"\"\"This method is called when the user double-clicks on the map.\"\"\
    \"\n      lat_lng=36, 74\n      pass\n\n    def link_1_copy_click(self, **event_args):\n\
    \      \"\"\"This method is called when the link is clicked\"\"\"\n      pass\n"
  class_name: Menu
  id: QDBX7SFBP7ZWCZNYWLQ4E7WLBPHS4YCN
startup: {type: form, module: Menu}
package_name: House_Price_Predictor
allow_embedding: false
name: House Price Predictor
runtime_options: {version: 2, client_version: '3', server_version: python3-sandbox,
  server_spec: null}
metadata: {title: House Price Predictor, logo_img: 'https://media.istockphoto.com/id/1369053959/vector/house.jpg?s=612x612&w=0&k=20&c=iA7YgnbjMT89OD8WDtINPoD6p4-sY-GVp1Tt0YdeqxA='}
startup_form: null
dependency_order: []
dependency_ids: {}
dependency_code: {}
theme:
  templates:
  - name: Standard Page
    description: A page with an app bar and an optional sidebar.
    img: img/form-templates/material-design.png
    form:
      class_name: Form
      is_package: true
      container:
        type: HtmlTemplate
        properties: {html: '@theme:standard-page.html'}
      components:
      - type: ColumnPanel
        properties: {}
        name: content_panel
        layout_properties: {slot: default}
      - type: FlowPanel
        properties: {}
        name: navbar_links
        layout_properties: {slot: nav-right}
      code: "from ._anvil_designer import $NAME$Template\nfrom anvil import *\n\n\
        class $NAME$($NAME$Template):\n\n  def __init__(self, **properties):\n   \
        \ # Set Form properties and Data Bindings.\n    self.init_components(**properties)\n\
        \n    # Any code you write here will run before the form opens.\n    \n"
  parameters:
    roles:
    - name: text
      components: [Label, Link]
    - name: subheading
      components: [Label]
    - name: input-prompt
      components: [Label]
    - name: headline
      components: [Label]
      displayInToolbox: true
      title: Headline
      display_in_toolbox: true
    - name: display-4
      components: [Label]
    - name: card
      components: [ColumnPanel, LinearPanel, XYPanel, RepeatingPanel]
      displayInToolbox: true
      title: Card
      display_in_toolbox: true
    - name: raised
      components: [Button, FileLoader]
    - name: primary-color
      components: [Button, FileLoader]
      title: Highlighted Button
      display_in_toolbox: true
    - name: secondary-color
      components: [Button, FileLoader]
    - name: dense
      components: [TextBox]
    - name: selected
      components: [Link]
    color_scheme:
      preset_groups:
      - name: Primary Colour
        options:
        - name: Blue
          colors:
          - {name: Primary 500, color: '#2196F3'}
          - {name: Primary 700, color: '#1976D2'}
        - name: Orange
          colors:
          - {name: Primary 500, color: '#FF9800'}
          - {name: Primary 700, color: '#F57C00'}
        - name: Red
          colors:
          - {name: Primary 500, color: '#F44336'}
          - {name: Primary 700, color: '#D32F2F'}
        - name: Pink
          colors:
          - {name: Primary 500, color: '#E91E63'}
          - {name: Primary 700, color: '#C2185B'}
        - name: Purple
          colors:
          - {name: Primary 500, color: '#9C27B0'}
          - {name: Primary 700, color: '#7B1FA2'}
        - name: Deep Purple
          colors:
          - {name: Primary 500, color: '#673AB7'}
          - {name: Primary 700, color: '#512DA8'}
        - name: Indigo
          colors:
          - {name: Primary 500, color: '#3F51B5'}
          - {name: Primary 700, color: '#303F9F'}
        - name: Light Blue
          colors:
          - {name: Primary 500, color: '#03A9F4'}
          - {name: Primary 700, color: '#0288D1'}
        - name: Cyan
          colors:
          - {name: Primary 500, color: '#00BCD4'}
          - {name: Primary 700, color: '#0097A7'}
        - name: Teal
          colors:
          - {name: Primary 500, color: '#009688'}
          - {name: Primary 700, color: '#00796B'}
        - name: Green
          colors:
          - {name: Primary 500, color: '#4CAF50'}
          - {name: Primary 700, color: '#388E3C'}
        - name: Light Green
          colors:
          - {name: Primary 500, color: '#8BC34A'}
          - {name: Primary 700, color: '#689F38'}
        - name: Lime
          colors:
          - {name: Primary 500, color: '#CDDC39'}
          - {name: Primary 700, color: '#AFB42B'}
        - name: Deep orange
          colors:
          - {name: Primary 500, color: '#FF5722'}
          - {name: Primary 700, color: '#E64A19'}
        - name: Brown
          colors:
          - {name: Primary 500, color: '#795548'}
          - {name: Primary 700, color: '#5D4037'}
        - name: Grey
          colors:
          - {name: Primary 500, color: '#9E9E9E'}
          - {name: Primary 700, color: '#616161'}
      - name: Secondary Colour
        options:
        - name: Blue
          colors:
          - {name: Secondary 500, color: '#2196F3'}
          - {name: Secondary 700, color: '#1976D2'}
        - name: Orange
          colors:
          - {name: Secondary 500, color: '#FF9800'}
          - {name: Secondary 700, color: '#F57C00'}
        - name: Red
          colors:
          - {name: Secondary 500, color: '#F44336'}
          - {name: Secondary 700, color: '#D32F2F'}
        - name: Pink
          colors:
          - {name: Secondary 500, color: '#E91E63'}
          - {name: Secondary 700, color: '#C2185B'}
        - name: Purple
          colors:
          - {name: Secondary 500, color: '#9C27B0'}
          - {name: Secondary 700, color: '#7B1FA2'}
        - name: Deep Purple
          colors:
          - {name: Secondary 500, color: '#673AB7'}
          - {name: Secondary 700, color: '#512DA8'}
        - name: Indigo
          colors:
          - {name: Secondary 500, color: '#3F51B5'}
          - {name: Secondary 700, color: '#303F9F'}
        - name: Light Blue
          colors:
          - {name: Secondary 500, color: '#03A9F4'}
          - {name: Secondary 700, color: '#0288D1'}
        - name: Cyan
          colors:
          - {name: Secondary 500, color: '#00BCD4'}
          - {name: Secondary 700, color: '#0097A7'}
        - name: Teal
          colors:
          - {name: Secondary 500, color: '#009688'}
          - {name: Secondary 700, color: '#00796B'}
        - name: Green
          colors:
          - {name: Secondary 500, color: '#4CAF50'}
          - {name: Secondary 700, color: '#388E3C'}
        - name: Light Green
          colors:
          - {name: Secondary 500, color: '#8BC34A'}
          - {name: Secondary 700, color: '#689F38'}
        - name: Lime
          colors:
          - {name: Secondary 500, color: '#CDDC39'}
          - {name: Secondary 700, color: '#AFB42B'}
        - name: Deep orange
          colors:
          - {name: Secondary 500, color: '#FF5722'}
          - {name: Secondary 700, color: '#E64A19'}
        - name: Brown
          colors:
          - {name: Secondary 500, color: '#795548'}
          - {name: Secondary 700, color: '#5D4037'}
        - name: Grey
          colors:
          - {name: Secondary 500, color: '#9E9E9E'}
          - {name: Secondary 700, color: '#616161'}
      colors:
      - {name: Primary 500, color: '#2196F3'}
      - {name: Primary 700, color: '#1976D2'}
      - {name: Secondary 500, color: '#FF9800'}
      - {name: Secondary 700, color: '#F57C00'}
      - {name: White, color: '#FFFFFF'}
      - {name: Gray 50, color: '#FAFAFA'}
      - {name: Gray 100, color: '#F5F5F5'}
      - {name: Gray 200, color: '#EEEEEE'}
      - {name: Gray 300, color: '#E0E0E0'}
      - {name: Gray 600, color: '#757575'}
      - {name: Gray 800, color: '#424242'}
      - {name: Gray 900, color: '#212121'}
      - {name: Black, color: '#000000'}
  assets:
  - {name: standard-page.html, content: PGxpbmsgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzozMDAsNDAwLDUwMCIgcmVsPSJzdHlsZXNoZWV0IiByZWw9InByZWxvYWQiIGFzPSJmb250IiBjcm9zc29yaWdpbj0iYW5vbnltb3VzIj4KCjxkaXYgY2xhc3M9InN0cnVjdHVyZSI+CiAgPGRpdiBjbGFzcz0iYXBwLWJhciIgYW52aWwtZHJvcC1jb250YWluZXI9Ii5hbnZpbC1jb250YWluZXIiIGFudmlsLWRyb3AtcmVkaXJlY3Q9Ii5wbGFjZWhvbGRlciI+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRvcC1sZWZ0LWJ0biIgYW52aWwtaGlkZS1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSI+PGkgY2xhc3M9ImZhIGZhLWJhcnMiPjwvaT48L2E+CiAgICA8YSBjbGFzcz0ic2lkZWJhci10b2dnbGUgYW52aWwtZGVzaWduZXItb25seSIgYW52aWwtaWYtc2xvdC1lbXB0eT0idG9wLWxlZnQtYnRuIiBhbnZpbC1pZi1zbG90LWVtcHR5PSJsZWZ0LW5hdiIgYW52aWwtZHJvcC1zbG90PSJ0b3AtbGVmdC1idG4iPjxpIGNsYXNzPSJmYSBmYS1ibGFuayI+PC9pPjwvYT4KICAgIDxkaXYgY2xhc3M9InRvcC1sZWZ0LWJ0biIgYW52aWwtc2xvdD0idG9wLWxlZnQtYnRuIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InRpdGxlIiBhbnZpbC1zbG90PSJ0aXRsZSI+CiAgICAgIDxkaXYgY2xhc3M9InBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9InRpdGxlIiBhbnZpbC1kcm9wLWhlcmU+RHJvcCB0aXRsZSBoZXJlPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImFwcC1iYXItbmF2IiBhbnZpbC1zbG90PSJuYXYtcmlnaHQiPgogICAgICA8ZGl2IGNsYXNzPSJwbGFjZWhvbGRlciBhbnZpbC1kZXNpZ25lci1vbmx5IiBhbnZpbC1pZi1zbG90LWVtcHR5PSJuYXYtcmlnaHQiIGFudmlsLWRyb3AtaGVyZT5Ecm9wIGEgRmxvd1BhbmVsIGhlcmU8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBzdHlsZT0iY2xlYXI6Ym90aCI+PC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgY2xhc3M9Im5hdi1ob2xkZXIiPgogICAgPGRpdiBjbGFzcz0ibGVmdC1uYXYgYW52aWwtbWVhc3VyZS10aGlzIiBhbnZpbC1zbG90LXJlcGVhdD0ibGVmdC1uYXYiIGFudmlsLWRyb3AtY29udGFpbmVyPSI+LmFudmlsLWNvbnRhaW5lciI+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImxlZnQtbmF2LXBsYWNlaG9sZGVyIGFudmlsLWRlc2lnbmVyLW9ubHkiIGFudmlsLWlmLXNsb3QtZW1wdHk9ImxlZnQtbmF2IiBhbnZpbC1kcm9wLXNsb3Q9ImxlZnQtbmF2Ij4KICAgICAgPGRpdiBjbGFzcz0icHJvbXB0Ij5UbyBhZGQgYSBzaWRlYmFyLCBkcm9wIGEgQ29sdW1uUGFuZWwgaGVyZS48L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICA8ZGl2IGFudmlsLXNsb3QtcmVwZWF0PSJkZWZhdWx0IiBjbGFzcz0iYW52aWwtbWVhc3VyZS10aGlzIj48L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0icGxhY2Vob2xkZXIgZHJvcC1oZXJlIiBhbnZpbC1pZi1zbG90LWVtcHR5PSJkZWZhdWx0IiBhbnZpbC1kcm9wLXNsb3Q9ImRlZmF1bHQiPkRyb3AgYSBDb2x1bW5QYW5lbCBoZXJlLjwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ibmF2LXNoaWVsZCI+PC9kaXY+CjwvZGl2Pgo8ZGl2IGFudmlsLWRyb3AtZGVmYXVsdCBhbnZpbC1kcm9wLXJlZGlyZWN0PSIucGxhY2Vob2xkZXIiIGFudmlsLWRyb3AtY29udGFpbmVyPSIuYW52aWwtY29udGFpbmVyIj48L2Rpdj4KIAo8c2NyaXB0PgogIGZ1bmN0aW9uIGhpZGVTaWRlYmFyKCkgewogICAgdmFyIGxuID0gJCgnLnN0cnVjdHVyZSA+IC5uYXYtaG9sZGVyID4gLmxlZnQtbmF2Jyk7CiAgICBsbi5hbmltYXRlKHtsZWZ0OiAtbG4ub3V0ZXJXaWR0aCgpfSwgZnVuY3Rpb24oKSB7CiAgICAgIGxuLnJlbW92ZUNsYXNzKCJpbi10cmFuc2l0aW9uIHNob3duIikuYWRkQ2xhc3MoImhpZGRlbiIpOwogICAgICAkKCcubmF2LXNoaWVsZCcpLnJlbW92ZUNsYXNzKCJzaG93biIpOwogICAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7CiAgICB9KTsKICB9CiAgZnVuY3Rpb24gc2hvd1NpZGViYXIoKSB7CiAgICB2YXIgbG4gPSAkKCcuc3RydWN0dXJlID4gLm5hdi1ob2xkZXIgPiAubGVmdC1uYXYnKTsKICAgICQoJy5uYXYtc2hpZWxkJykuYWRkQ2xhc3MoInNob3duIik7CiAgICBsbi5hZGRDbGFzcygic2hvd24iKS5yZW1vdmVDbGFzcygiaGlkZGVuIikuY3NzKHtsZWZ0OiAiLTEwMCUifSkuY3NzKHtsZWZ0OiAtbG4ub3V0ZXJXaWR0aCgpfSkuYW5pbWF0ZSh7bGVmdDogMH0sIGZ1bmN0aW9uKCkgewogICAgICBsbi5yZW1vdmVDbGFzcygiaW4tdHJhbnNpdGlvbiIpOwogICAgfSk7CiAgICAkKHdpbmRvdykudHJpZ2dlcigncmVzaXplJyk7CiAgfQogICQoJy5zaWRlYmFyLXRvZ2dsZSwgLm5hdi1zaGllbGQnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CiAgICB2YXIgbG4gPSAkKCcuc3RydWN0dXJlID4gLm5hdi1ob2xkZXIgPiAubGVmdC1uYXYnKTsKICAgIGlmIChsbi5pcygiOnZpc2libGUiKSB8fCAkKCcubmF2LXNoaWVsZCcpLmlzKCIuc2hvd24iKSkgewogICAgICBoaWRlU2lkZWJhcigpOwogICAgfSBlbHNlIGlmKCFsbi5pcygiOmVtcHR5IikpIHsKICAgICAgc2hvd1NpZGViYXIoKTsKICAgIH0KICB9KTsKICAkKCcubGVmdC1uYXYnKS5vZmYoJ2NsaWNrJykub24oJ2NsaWNrJywgJ2EsIGJ1dHRvbicsIGZ1bmN0aW9uKCkgewogICAgaWYgKCQoJy5uYXYtc2hpZWxkJykuaXMoIjp2aXNpYmxlIikpIHsKICAgICAgJCgnLm5hdi1zaGllbGQnKS50cmlnZ2VyKCdjbGljaycpOwogICAgfQogIH0pOwo8L3NjcmlwdD4=,
    id: CZPTM4F6W4DZ56JQDWIKCAILN3A55GEO}
  - {name: theme.css, content: LyoqCiBUaGlzIENTUyBpbXBsZW1lbnRzIHRoZSBNYXRlcmlhbCBEZXNpZ24gbG9vayBhbmQgZmVlbCBmb3IgQW52aWwgYXBwcy4KICoqLwoKLyogU3RvcCBwYW5lbC1jb2xzIGN1dHRpbmcgb2ZmIGRyb3Agc2hhZG93cyAqLwouYW52aWwtcGFuZWwtY29sIHsKICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICBtYXJnaW4tYm90dG9tOiAtMTBweDsKfQoKLmNvbnRlbnQgPiAucGxhY2Vob2xkZXIgewogIG1hcmdpbjogMTZweDsKICBjb2xvcjogIzg4ODsKICBmb250LXNpemU6IDE4cHg7CiAgb3V0bGluZTogMXB4IGRvdHRlZDsKICBwYWRkaW5nOiAxNnB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLyogUHV0IHRoaW5ncyBvbiBhIDRweCBncmlkIChub25lIG9mIHRoaXMgN3B4IG5vbnNlbnNlKSAqLwouaGFzLXRleHQgLmFudmlsLWNvbXBvbmVudC1pY29uLmxlZnQtaWNvbiB7IG1hcmdpbi1yaWdodDogOHB4OyB9Ci5oYXMtdGV4dCAuYW52aWwtY29tcG9uZW50LWljb24ucmlnaHQtaWNvbiB7IG1hcmdpbi1sZWZ0OiA4cHg7IH0KCmE+LmFudmlsLWNvbXBvbmVudC1pY29uLmxlZnRfZWRnZS1pY29uLAphPi5hbnZpbC1jb21wb25lbnQtaWNvbi5yaWdodF9lZGdlLWljb24sCi5hbnZpbC1sYWJlbD4uYW52aWwtY29tcG9uZW50LWljb24ubGVmdF9lZGdlLWljb24sCi5hbnZpbC1sYWJlbD4uYW52aWwtY29tcG9uZW50LWljb24ucmlnaHRfZWRnZS1pY29uIHsKICBwYWRkaW5nLXRvcDogOHB4OwogIHBhZGRpbmctYm90dG9tOiA4cHg7Cn0KLmFudmlsLWxhYmVsPi5sYWJlbC10ZXh0LCBhPi5saW5rLXRleHQgewogIHBhZGRpbmctdG9wOiA4cHg7CiAgcGFkZGluZy1ib3R0b206IDhweDsKfQouZmlsZS1sb2FkZXI+bGFiZWwgewogICAgcGFkZGluZzogOHB4Owp9Ci5jaGVja2JveCBsYWJlbCwgLnJhZGlvIGxhYmVsIHsKICAgIHBhZGRpbmctdG9wOiA4cHg7IHBhZGRpbmctcmlnaHQ6IDhweDsgcGFkZGluZy1ib3R0b206IDhweDsKfQouYW52aWwtc3BhY2luZy1hYm92ZS1ub25lIHsgbWFyZ2luLXRvcDogMHB4OyB9Ci5hbnZpbC1zcGFjaW5nLWFib3ZlLXNtYWxsIHsgbWFyZ2luLXRvcDogNHB4OyB9Ci5hbnZpbC1zcGFjaW5nLWFib3ZlLW1lZGl1bSB7IG1hcmdpbi10b3A6IDhweDsgfQouYW52aWwtc3BhY2luZy1hYm92ZS1sYXJnZSB7IG1hcmdpbi10b3A6IDE2cHg7IH0KLmFudmlsLXNwYWNpbmctYmVsb3ctbm9uZSB7IG1hcmdpbi1ib3R0b206IDBweDsgfQouYW52aWwtc3BhY2luZy1iZWxvdy1zbWFsbCB7IG1hcmdpbi1ib3R0b206IDRweDsgfQouYW52aWwtc3BhY2luZy1iZWxvdy1tZWRpdW0geyBtYXJnaW4tYm90dG9tOiA4cHg7IH0KLmFudmlsLXNwYWNpbmctYmVsb3ctbGFyZ2UgeyBtYXJnaW4tYm90dG9tOiAxNnB4OyB9CgoKLmNvbC1wYWRkaW5nLmNvbC1wYWRkaW5nLXRpbnkgeyBwYWRkaW5nOiAwIDJweDsgfQouY29sdW1uLXBhbmVsLmNvbC1wYWRkaW5nLXRpbnkgPiAuYW52aWwtcGFuZWwtc2VjdGlvbiA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWNvbnRhaW5lciA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWd1dHRlciB7IG1hcmdpbjogMCAtMnB4OyB9CgouY29sLXBhZGRpbmcuY29sLXBhZGRpbmctc21hbGwgeyBwYWRkaW5nOiAwIDRweDsgfQouY29sdW1uLXBhbmVsLmNvbC1wYWRkaW5nLXNtYWxsID4gLmFudmlsLXBhbmVsLXNlY3Rpb24gPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1jb250YWluZXIgPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1ndXR0ZXIgeyBtYXJnaW46IDAgLTRweDsgfQoKLmNvbC1wYWRkaW5nLmNvbC1wYWRkaW5nLW1lZGl1bSB7IHBhZGRpbmc6IDAgOHB4OyB9Ci5jb2x1bW4tcGFuZWwuY29sLXBhZGRpbmctbWVkaXVtID4gLmFudmlsLXBhbmVsLXNlY3Rpb24gPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1jb250YWluZXIgPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1ndXR0ZXIgeyBtYXJnaW46IDAgLThweDsgfQoKLmNvbC1wYWRkaW5nLmNvbC1wYWRkaW5nLWxhcmdlIHsgcGFkZGluZzogMCAxMnB4OyB9Ci5jb2x1bW4tcGFuZWwuY29sLXBhZGRpbmctbGFyZ2UgPiAuYW52aWwtcGFuZWwtc2VjdGlvbiA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWNvbnRhaW5lciA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWd1dHRlciB7IG1hcmdpbjogMCAtMTJweDsgfQoKLmNvbC1wYWRkaW5nLmNvbC1wYWRkaW5nLWh1Z2UgeyBwYWRkaW5nOiAwIDIwcHg7IH0KLmNvbHVtbi1wYW5lbC5jb2wtcGFkZGluZy1odWdlID4gLmFudmlsLXBhbmVsLXNlY3Rpb24gPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1jb250YWluZXIgPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1ndXR0ZXIgeyBtYXJnaW46IDAgLTIwcHg7IH0KCi5mbG93LXBhbmVsLmZsb3ctc3BhY2luZy10aW55ID4gLmZsb3ctcGFuZWwtZ3V0dGVyIHsgbWFyZ2luOiAwIC0ycHg7IH0KLmZsb3ctcGFuZWwuZmxvdy1zcGFjaW5nLXRpbnkgPiAuZmxvdy1wYW5lbC1ndXR0ZXIgPiAuZmxvdy1wYW5lbC1pdGVtIHsgCiAgbWFyZ2luLWxlZnQ6IDJweDsKICBtYXJnaW4tcmlnaHQ6IDJweDsKfQoKLmZsb3ctcGFuZWwuZmxvdy1zcGFjaW5nLXNtYWxsID4gLmZsb3ctcGFuZWwtZ3V0dGVyIHsgbWFyZ2luOiAwIC00cHg7IH0KLmZsb3ctcGFuZWwuZmxvdy1zcGFjaW5nLXNtYWxsID4gLmZsb3ctcGFuZWwtZ3V0dGVyID4gLmZsb3ctcGFuZWwtaXRlbSB7IAogIG1hcmdpbi1sZWZ0OiA0cHg7CiAgbWFyZ2luLXJpZ2h0OiA0cHg7Cn0KCi5mbG93LXBhbmVsLmZsb3ctc3BhY2luZy1tZWRpdW0gPiAuZmxvdy1wYW5lbC1ndXR0ZXIgeyBtYXJnaW46IDAgLThweDsgfQouZmxvdy1wYW5lbC5mbG93LXNwYWNpbmctbWVkaXVtID4gLmZsb3ctcGFuZWwtZ3V0dGVyID4gLmZsb3ctcGFuZWwtaXRlbSB7IAogIG1hcmdpbi1sZWZ0OiA4cHg7CiAgbWFyZ2luLXJpZ2h0OiA4cHg7Cn0KCi5mbG93LXBhbmVsLmZsb3ctc3BhY2luZy1sYXJnZSA+IC5mbG93LXBhbmVsLWd1dHRlciB7IG1hcmdpbjogMCAtMTJweDsgfQouZmxvdy1wYW5lbC5mbG93LXNwYWNpbmctbGFyZ2UgPiAuZmxvdy1wYW5lbC1ndXR0ZXIgPiAuZmxvdy1wYW5lbC1pdGVtIHsgCiAgbWFyZ2luLWxlZnQ6IDEycHg7CiAgbWFyZ2luLXJpZ2h0OiAxMnB4Owp9CgouZmxvdy1wYW5lbC5mbG93LXNwYWNpbmctaHVnZSA+IC5mbG93LXBhbmVsLWd1dHRlciB7IG1hcmdpbjogMCAtMjBweDsgfQouZmxvdy1wYW5lbC5mbG93LXNwYWNpbmctaHVnZSA+IC5mbG93LXBhbmVsLWd1dHRlciA+IC5mbG93LXBhbmVsLWl0ZW17IAogIG1hcmdpbi1sZWZ0OiAyMHB4OwogIG1hcmdpbi1yaWdodDogMjBweDsKfQoKCi8qIFR5cG9ncmFwaHkgKi8KYm9keSB7CiAgZm9udC1mYW1pbHk6IFJvYm90bywgTm90bywgQXJpYWwsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAxNHB4OwogIGxpbmUtaGVpZ2h0OiAxLjQyODY7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZhZmFmYTsKfQoKQG1lZGlhIHByaW50IHsKICBib2R5IHsKICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIH0KfQoKYSwgYTpmb2N1cyB7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogIGNvbG9yOiAlY29sb3I6UHJpbWFyeSA3MDAlOwp9CgphOmhvdmVyLCBhOmFjdGl2ZSB7CiAgY29sb3I6ICVjb2xvcjpQcmltYXJ5IDUwMCU7Cn0KCi5hbnZpbC1sYWJlbCB7Ci8qICBmb250LXNpemU6IDE2cHg7Ki8KfQoKLmFudmlsLXJvbGUtc3ViaGVhZGluZyB7CiAgZm9udC1zaXplOiAxNnB4OwogIGxpbmUtaGVpZ2h0OiAyNGRwOwp9CgouYW52aWwtcm9sZS1oZWFkbGluZSB7CiAgZm9udC1zaXplOiAyNHB4OwogIGxpbmUtaGVpZ2h0OiAzMnB4Owp9CgouYW52aWwtcm9sZS1pbnB1dC1wcm9tcHQgewogIGZvbnQtc2l6ZTogMTZweDsKICBsaW5lLWhlaWdodDogMS41Owp9CgouYW52aWwtcm9sZS1kaXNwbGF5LTQgewogIGZvbnQtc2l6ZTogMTEycHg7CiAgZm9udC13ZWlnaHQ6IGxpZ2h0Owp9CgouYW52aWwtcm9sZS10ZXh0IHsKICBmb250LXNpemU6IDE0cHg7Cn0KLmFudmlsLXJvbGUtdGV4dCA+IC5sYWJlbC10ZXh0LCAuYW52aWwtcm9sZS10ZXh0IC5saW5rLXRleHQgewogIHBhZGRpbmctdG9wOiAwOwogIHBhZGRpbmctYm90dG9tOiAwOwp9CgovKiBQYWdlIHN0cnVjdHVyZTogQXBwIGJhciB3aXRoIG9wdGlvbmFsIGxlZnQgbmF2ICovCi5zdHJ1Y3R1cmUgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBtaW4taGVpZ2h0OiAxMDB2aDsKICBtaW4taGVpZ2h0OiBjYWxjKDEwMHZoIC0gJWFudmlsLWJhbm5lci1oZWlnaHQlKTsKICBoZWlnaHQ6IDA7IC8qIFRvIG1ha2UgZmxleC1ncm93IHdvcmsgaW4gSUUgKi8KfQoKLyogSG93ZXZlciwgdGhpcyBicmVha3MgdGhlIGRlc2lnbmVyJ3MgaGVpZ2h0IG1lYXN1cmVtZW50LiBJRSBpc24ndCBzdXBwb3J0ZWQgZm9yIHRoZSBkZXNpZ25lciwgc28gc2V0IGl0IGJhY2suICovCi5kZXNpZ25lciAuc3RydWN0dXJlIHsKICBoZWlnaHQ6IGluaXRpYWw7Cn0KCi5hcHAtYmFyIHsKICBmbGV4OiAwIDA7CiAgZmxleC1iYXNpczogYXV0bzsKICBmbGV4LWJhc2lzOiBjb250ZW50Owp9CgoubmF2LWhvbGRlciB7CiAgZmxleC1ncm93OiAxOwogIG92ZXJmbG93LXk6IGF1dG87Cn0KCkBtZWRpYSBwcmludCB7CiAgLm5hdi1ob2xkZXIgewogICAgb3ZlcmZsb3cteTogaW5pdGlhbDsKICB9Cn0KCgovKiBNb2JpbGUgYW5kIGRlc2t0b3AgbWFyZ2lucyBmb3IgY29udGVudCAqLwouY29udGVudCA+ICogPiAuYW52aWwtY29udGFpbmVyIHsKICBwYWRkaW5nOiA4cHg7Cn0KCkBtZWRpYShtaW4td2lkdGg6OTkxcHgpIHsKICAuY29udGVudCA+ICogPiAuYW52aWwtY29udGFpbmVyIHsKICAgIHBhZGRpbmc6IDE2cHggMjRweDsKICB9Cn0KCi5jb250ZW50IC5hbnZpbC1tZWFzdXJlLXRoaXMgewogIHBhZGRpbmctYm90dG9tOiAxcHg7IC8qIFByZXZlbnQgbWFyZ2luIGNvbGxhcHNlIG1lc3NpbmcgdXAgZW1iZWRkaW5nICovCn0KCi8qIEFsbG93IG92ZXJmbG93cyB0byBzaG93IGRyb3Agc2hhZG93cyBpbiBDb2x1bW5QYW5lbHMKICAgVGhpcyBjYW4gY3JlYXRlIHVud2FudGVkIHNjcm9sbGJhcnM7IHdlIGNvbXBlbnNhdGUgZm9yIHRoaXMgYXQgdGhlIHRvcCBsZXZlbCB3aXRoIC5uYXYtaG9sZGVyIC5jb250ZW50IHtvdmVyZmxvdy14OiBoaWRkZW47fQoqLwouYW52aWwtY29udGFpbmVyLW92ZXJmbG93IHsKICBvdmVyZmxvdy14OiB2aXNpYmxlOwogIG92ZXJmbG93LXk6IHZpc2libGU7Cn0KCgovKiBEZXNrdG9wOiBOYXYgYmFyIHBpbm5lZCAqLwoKLm5hdi1ob2xkZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IHJvdzsKfQoKLm5hdi1ob2xkZXIgLmxlZnQtbmF2IHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgZmxleC1zaHJpbms6IDA7CiAgbWluLXdpZHRoOiAxNjBweDsKICBtYXgtd2lkdGg6IDQwMHB4Owp9CgoubmF2LXNoaWVsZCB7CiAgZGlzcGxheTogbm9uZTsKfQoKLyogTW9iaWxlOiBOYXYgYmFyIGlzIGEgbW9kYWwgb3ZlcmxheSAqLwoKQG1lZGlhKG1heC13aWR0aDo5OThweCkgewogIGh0bWw6bm90KC5kZXNpZ25lcikgLm5hdi1ob2xkZXIgewogICAgZGlzcGxheTogYmxvY2s7CiAgfQogIGh0bWw6bm90KC5kZXNpZ25lcikgLm5hdi1ob2xkZXIgLmxlZnQtbmF2IHsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIHRvcDogMDsKICAgIGJvdHRvbTogMDsKICAgIHdpZHRoOiBjYWxjKDEwMCUgLSA1NnB4KTsKICAgIG1heC13aWR0aDogMzYwcHg7CiAgICB6LWluZGV4OiAzOwogICAgYm9yZGVyLXJpZ2h0OiBub25lOwogIC8qIDE2ZHAgKi8gYm94LXNoYWRvdzogMCAxNnB4IDI0cHggMnB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgNnB4IDMwcHggNXB4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgOHB4IDEwcHggLTVweCByZ2JhKDAsIDAsIDAsIDAuMik7CgogICAgZGlzcGxheTogbm9uZTsKICAgIHRyYW5zaXRpb246IHJpZ2h0IDAuNXM7CiAgfQogIAogIGh0bWw6bm90KC5kZXNpZ25lcikgLm5hdi1ob2xkZXIgLmxlZnQtbmF2LnNob3duIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogIH0KICAubmF2LXNoaWVsZC5zaG93biB7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHBvc2l0aW9uOiBmaXhlZDsKICAgIHRvcDogMDsKICAgIGJvdHRvbTogMDsKICAgIGxlZnQ6IDA7CiAgICByaWdodDogMDsKICAgIHotaW5kZXg6IDI7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuMik7CiAgfQogfQoKLm5hdi1ob2xkZXIgLmxlZnQtbmF2LCAubGVmdC1uYXYtcGxhY2Vob2xkZXIgewogIGRpc3BsYXk6IGZsZXg7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZTBlMGUwOwogIGZvbnQtc2l6ZTogMTRweDsKICBmb250LXdlaWdodDogNTAwOwogIGNvbG9yOiByZ2JhKDAsMCwwLDAuODcpOwogIG92ZXJmbG93LXg6IGhpZGRlbjsKICBvdmVyZmxvdy15OiBhdXRvOwp9CgoubGVmdC1uYXYtcGxhY2Vob2xkZXIgewogIGRpc3BsYXk6IGJsb2NrOwogIHBhZGRpbmc6IDhweDsKICBsaW5lLWhlaWdodDogMTsKICB3aWR0aDogNThweDsKfQoubGVmdC1uYXYtcGxhY2Vob2xkZXIgLnByb21wdCB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIHdoaXRlLXNwYWNlOiBub3dyYXA7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwwKSByb3RhdGUoLTkwZGVnKSB0cmFuc2xhdGUoLTUwJSwwKSB0cmFuc2xhdGUoMTVweCwxNnB4KTsKICBwYWRkaW5nOiAxNnB4IDE2cHg7CiAgY29sb3I6ICM4ODg7CiAgb3V0bGluZTogMXB4IGRvdHRlZCAjODg4OwogIHZpc2liaWxpdHk6IGhpZGRlbjsKfQouYW52aWwtaGlnaGxpZ2h0IC5sZWZ0LW5hdi1wbGFjZWhvbGRlciAucHJvbXB0IHsKICB2aXNpYmlsaXR5OiB2aXNpYmxlOwp9CgoubGVmdC1uYXYgPiAuY29sdW1uLXBhbmVsIHsKICBwYWRkaW5nOiAyNHB4IDA7Cn0KLmxlZnQtbmF2ID4gLmNvbHVtbi1wYW5lbCA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uID4gLmFudmlsLXBhbmVsLXNlY3Rpb24tY29udGFpbmVyOm5vdCguZnVsbC13aWR0aC1yb3cpIHsKICBtYXJnaW46IDAgMTZweDsKICB3aWR0aDogaW5pdGlhbDsKICBtYXgtd2lkdGg6IGluaXRpYWw7CiAgb3ZlcmZsb3cteDogdmlzaWJsZTsKfQoubGVmdC1uYXYgPiAuY29sdW1uLXBhbmVsID4gLmFudmlsLXBhbmVsLXNlY3Rpb246Zmlyc3QtY2hpbGQgPiAuYW52aWwtcGFuZWwtc2VjdGlvbi1jb250YWluZXIuZnVsbC13aWR0aC1yb3cgewogIG1hcmdpbi10b3A6IC0yNHB4Owp9Ci5sZWZ0LW5hdiA+IC5jb2x1bW4tcGFuZWwgPiAuYW52aWwtcGFuZWwtc2VjdGlvbiA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWNvbnRhaW5lciA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWd1dHRlciA+IC5hbnZpbC1wYW5lbC1yb3cgPiAuYW52aWwtcGFuZWwtY29sIHsKICBvdmVyZmxvdy14OiB2aXNpYmxlOwp9CgovKiBNYWtlIGFsbCB0aGUgc2lkZWJhciBpY29ucyBsb29rIG5pY2UgKi8KCi5sZWZ0LW5hdiAuYW52aWwtY29tcG9uZW50LWljb24gewogIGZvbnQtc2l6ZTogMTYwJTsKfQoKLmxlZnQtbmF2IC5hbnZpbC1jb21wb25lbnQtaWNvbi5sZWZ0LWljb24gewogIHdpZHRoOiAwOwogIG1hcmdpbi1yaWdodDogNTZweDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgdG9wOiAwLjE1ZW07ICAKfQoKLmxlZnQtbmF2IC5hbnZpbC1jb21wb25lbnQtaWNvbi5sZWZ0X2VkZ2UtaWNvbiwgLmxlZnQtbmF2IC5hbnZpbC1jb21wb25lbnQtaWNvbi5yaWdodF9lZGdlLWljb24gewogIGxlZnQ6IDE2cHg7CiAgcGFkZGluZy10b3A6IDJweDsKICB3aWR0aDogMDsKfQoKLmxlZnQtbmF2IC5hbnZpbC1jb21wb25lbnQtaWNvbi5yaWdodF9lZGdlLWljb24gewogIGxlZnQ6IGluaXRpYWw7CiAgcmlnaHQ6IDE2cHg7CiAgdG9wOiAwOwogIHBhZGRpbmctdG9wOiAycHg7Cn0KCi8qIFNpZGViYXIgbGlua3MgKGFuZCBsYWJlbHMgd2l0aCBlZGdlIGljb25zKSBnbyArMTZweCB3aWRlcgogICAoVG9wLWxldmVsIGNvbHVtbnMgaW4gQ29sdW1uUGFuZWxzIGdldCBvdmVyZmxvdy14IHZpc2libGUgW3NlZSBhYm92ZV10byBlbmFibGUgdGhpcykKKi8KCi5sZWZ0LW5hdiBhLCAubGVmdC1uYXYgLmFudmlsLWxhYmVsLmxlZnRfZWRnZS1pY29uLCAubGVmdC1uYXYgLmFudmlsLWxhYmVsLnJpZ2h0X2VkZ2UtaWNvbiB7CiAgY29sb3I6IHJnYmEoMCwwLDAsMC44Nyk7CiAgbWFyZ2luOiAwIC0xNnB4OwogIHBhZGRpbmc6IDRweCAxNnB4Owp9CgoubGVmdC1uYXYgLmFudmlsLWNvbXBvbmVudC5sZWZ0X2VkZ2UtaWNvbiB7CiAgcGFkZGluZy1sZWZ0OiA3MnB4Owp9CgoubGVmdC1uYXYgYTpob3ZlciwgLmxlZnQtbmF2IC5hbnZpbC1yb2xlLXNlbGVjdGVkIHsKICBjb2xvcjogJWNvbG9yOlByaW1hcnkgNzAwJTsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLC4wOCk7Cn0KCi5kZXNpZ25lciAubmF2LWhvbGRlciAubGVmdC1uYXYgewogIG1pbi13aWR0aDogNTZweDsKfQoKLmRlc2lnbmVyIC5uYXYtaG9sZGVyIC5sZWZ0LW5hdiA+IC5hbnZpbC1jb21wb25lbnQgewogIG1pbi13aWR0aDogMTYwcHg7Cn0KCi5uYXYtaG9sZGVyIC5sZWZ0LW5hdiA+IC5hbnZpbC1jb21wb25lbnQgewogIG1hcmdpbi10b3A6IDA7CiAgbWFyZ2luLWJvdHRvbTogMDsKfQoKLm5hdi1ob2xkZXIgLmNvbnRlbnQgewogIGZsZXg6IDE7CiAgb3ZlcmZsb3cteDogaGlkZGVuOwp9CgovKiBDb21wb25lbnRzOiBBcHAgQmFyICovCi5hcHAtYmFyIHsKICBtaW4taGVpZ2h0OiA1NnB4OwogIGxpbmUtaGVpZ2h0OiA0MHB4OwogIHBhZGRpbmc6IDAgMTZweCAwIDcycHg7CgogIGZvbnQtc2l6ZTogMjBweDsKICBmb250LXdlaWdodDogNTAwOwogIGNvbG9yOiB3aGl0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAlY29sb3I6UHJpbWFyeSA1MDAlOwogIAogIHotaW5kZXg6IDE7CiAgLyogNGRwICovIGJveC1zaGFkb3c6IDAgNHB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgMXB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpLCAwIDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMik7ICAKfQoKLmFwcC1iYXIgLmFudmlsLWNvbXBvbmVudCB7CiAgbWFyZ2luLXRvcDogMDsKICBtYXJnaW4tYm90dG9tOiAwOwp9CgouYXBwLWJhciA+IC5zaWRlYmFyLXRvZ2dsZSB7IGRpc3BsYXk6YmxvY2s7IGZsb2F0OmxlZnQ7ICBtYXJnaW4tbGVmdDogLTYxcHg7IH0KLmFwcC1iYXIgPiAudG9wLWxlZnQtYnRuIHsgZmxvYXQ6IGxlZnQ7IG1hcmdpbi1sZWZ0OiAtNjBweDsgbWFyZ2luLXJpZ2h0OiAtNDBweDsgfQouYXBwLWJhciA+IC50aXRsZSB7IGZsb2F0OiBsZWZ0OyB9Ci5hcHAtYmFyID4gLnRpdGxlID4gLnBsYWNlaG9sZGVyIHsgb3V0bGluZTogMXB4IGRvdHRlZDsgcGFkZGluZy1sZWZ0OiAxNnB4OyBwYWRkaW5nLXJpZ2h0OiAxNnB4OyBtYXJnaW46IDhweCA4cHggMDsgZGlzcGxheTpub25lOyB9Ci5hcHAtYmFyID4gLmFwcC1iYXItbmF2IHsgZmxvYXQ6IHJpZ2h0OyBmb250LXdlaWdodDogbm9ybWFsOyB9Ci5hcHAtYmFyID4gLmFwcC1iYXItbmF2IC5wbGFjZWhvbGRlciB7IG1hcmdpbi10b3A6IDhweDsgcGFkZGluZzogMCA4cHg7IH0KLmFudmlsLWhpZ2hsaWdodCAuYXBwLWJhciA+IC5hcHAtYmFyLW5hdiAucGxhY2Vob2xkZXIgeyBvdXRsaW5lOiAxcHggZG90dGVkICNjY2M7IH0KLmFudmlsLWhpZ2hsaWdodCAuYXBwLWJhciA+IC50aXRsZSA+IC5wbGFjZWhvbGRlciB7IGRpc3BsYXk6YmxvY2s7IH0KCi5hcHAtYmFyIGEsIC5hcHAtYmFyIC5hbnZpbC1jb21wb25lbnQgewogIGRpc3BsYXk6IGJsb2NrOwogIGNvbG9yOiB3aGl0ZTsKICBsaW5lLWhlaWdodDogMzBweDsKICBtaW4td2lkdGg6IDMwcHg7CiAgbWluLWhlaWdodDogMzBweDsKICBtYXJnaW46IDVweCA0cHggMDsKfQoKLmFwcC1iYXIgLnRpdGxlIC5hbnZpbC1jb21wb25lbnQgewogIG1hcmdpbi1sZWZ0OiAwOwp9CgouYXBwLWJhciBpbnB1dC5hbnZpbC1jb21wb25lbnQsIC5hcHAtYmFyIC5hbnZpbC1jb21wb25lbnQgaW5wdXQgewogIGxpbmUtaGVpZ2h0OiAzMHB4OwogIGNvbG9yOiB3aGl0ZTsKfQoKLmFwcC1iYXIgc2VsZWN0LmZvcm0tY29udHJvbCB7CiAgaGVpZ2h0OiA0M3B4OyAvKiAzMHB4IGxpbmUgaGVpZ2h0ICsgMTJweCBwYWRkaW5nICsgMXB4IGJvcmRlciAqLwp9CgouYXBwLWJhciAuYW52aWwtY29tcG9uZW50LWljb24tcHJlc2VudCAuYW52aWwtY29tcG9uZW50LWljb24sIC5hcHAtYmFyIC5zaWRlYmFyLXRvZ2dsZSAuZmEgewogIHdpZHRoOiAzMHB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLyogRG9uJ3QgcHV0IHNwYWNpbmcgb24gdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKGVnIEZsb3dQYW5lbCkgKi8KLmFwcC1iYXItbmF2ID4gLmFudmlsLWNvbnRhaW5lciB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7CiAgbWluLWhlaWdodDogNTZweDsKfQoKLmFudmlsLWhpZ2hsaWdodCAuYXBwLWJhci1uYXYgPiAuYW52aWwtY29udGFpbmVyOm5vdCguaGFzLWNvbXBvbmVudHMpOm5vdChhKSB7CiAgb3V0bGluZTogMXB4IGRvdHRlZCAjZmZmOwogIG1hcmdpbi10b3A6IDhweDsKICBtaW4taGVpZ2h0OiA0MHB4OwogIHBhZGRpbmc6IDVweCA4cHg7Cn0KCi5hbnZpbC1oaWdobGlnaHQgLmFwcC1iYXItbmF2ID4gLmFudmlsLWNvbnRhaW5lcjpub3QoLmhhcy1jb21wb25lbnRzKTpub3QoYSk6OmFmdGVyIHsgIAogIGNvbnRlbnQ6ICJEcm9wIExpbmtzIGhlcmUiCn0KCi8qIFJlamlnIG1hcmdpbiB2cyBwYWRkaW5nIHRvIGdpdmUgbGlua3MgdGhlIGhhbG8gKi8KLmFwcC1iYXIgYSwgLmFwcC1iYXIgYS5hbnZpbC1jb21wb25lbnQgewogIHBhZGRpbmc6IDVweDsKICBtYXJnaW46IDhweCAwIDA7CiAgYm9yZGVyLXJhZGl1czogMjBweDsKfQoKLmFwcC1iYXIgYSAubGluay10ZXh0IHsKICBwYWRkaW5nOiAwIDRweDsKfQouYXBwLWJhciBhLmhhcy10ZXh0IC5hbnZpbC1jb21wb25lbnQtaWNvbi5sZWZ0IHsKICBtYXJnaW4tcmlnaHQ6IDRweDsKfQouYXBwLWJhciBhLmhhcy10ZXh0IC5hbnZpbC1jb21wb25lbnQtaWNvbi5yaWdodCB7CiAgbWFyZ2luLWxlZnQ6IDRweDsKfQoKLmFwcC1iYXIgYTpob3ZlciwgLmFwcC1iYXIgYTphY3RpdmUgewogIGNvbG9yOiAjZWVlOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgYmFja2dyb3VuZC1jb2xvcjogJWNvbG9yOlByaW1hcnkgNzAwJTsKfQoKCi8qIENvbXBvbmVudDogRGlhbG9nIChhbGVydCksIE5vdGlmaWNhdGlvbiAqLwoubW9kYWwtY29udGVudCwgYm9keT5kaXZbZGF0YS1ub3RpZnk9ImNvbnRhaW5lciJdIHsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgLyogMjRkcCAqLyBib3gtc2hhZG93OiAwIDlweCA0NnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDExcHggMTVweCAtN3B4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgMjRweCAzOHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMikKICAgICFpbXBvcnRhbnQ7Cn0KCi5tb2RhbC1oZWFkZXIgewogIHBhZGRpbmc6IDI0cHggMjRweCAwcHg7CiAgZm9udC1zaXplOiAyNHB4OwogIGxpbmUtaGVpZ2h0OiAzMnB4OwogIGJvcmRlcjogMDsKfQoKLm1vZGFsLWJvZHkgewogIHBhZGRpbmc6IDIwcHggMjRweCAyNHB4OwogIGZvbnQtc2l6ZTogMTZweDsKICBjb2xvcjogIzc0NzQ3NDsKfQoKLm1vZGFsLWZvb3RlciB7CiAgcGFkZGluZzogOHB4IDhweCA4cHggMjRweDsKICBib3JkZXI6IDA7Cn0KCi5tb2RhbC1mb290ZXIgLmJ0biB7CiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgY29sb3I6ICVjb2xvcjpQcmltYXJ5IDUwMCU7Cn0KLm1vZGFsLWZvb3RlciAuYnRuLCAubW9kYWwtZm9vdGVyIC5idG46Zm9jdXMsIC5tb2RhbC1mb290ZXIgLmJ0bjphY3RpdmUgewogIGJveC1zaGFkb3c6IG5vbmU7CiAgdG9wOiAwOwp9CgovKiBOb3RpZmljYXRpb25zICovCmJvZHk+ZGl2W2RhdGEtbm90aWZ5PSJjb250YWluZXIiXSB7CiAgYmFja2dyb3VuZDogd2hpdGU7CiAgYm9yZGVyOiBub25lOwogIHBhZGRpbmc6IDI0cHg7Cn0KCmJvZHk+ZGl2W2RhdGEtbm90aWZ5PSJjb250YWluZXIiXT5zcGFuW2RhdGEtbm90aWZ5PSJ0aXRsZSJdIHsKICBkaXNwbGF5OiBibG9jazsKICBmb250LXNpemU6IDE4cHg7CiAgZm9udC13ZWlnaHQ6IDUwMDsKICBjb2xvcjogIzMzMzMzMzsKfQoKYm9keT5kaXZbZGF0YS1ub3RpZnk9ImNvbnRhaW5lciJdPnNwYW5bZGF0YS1ub3RpZnk9Im1lc3NhZ2UiXSB7CiAgZGlzcGxheTogYmxvY2s7CiAgcGFkZGluZzogMjBweCAwIDA7CiAgZm9udC1zaXplOiAxNnB4OwogIGNvbG9yOiAjNzQ3NDc0OyAgCn0KCmJvZHk+ZGl2W2RhdGEtbm90aWZ5PSJjb250YWluZXIiXS5hbGVydC1zdWNjZXNzewogIGJhY2tncm91bmQtY29sb3I6ICNkNGVkZGE7Cn0KCmJvZHk+ZGl2W2RhdGEtbm90aWZ5PSJjb250YWluZXIiXS5hbGVydC1zdWNjZXNzPnNwYW5bZGF0YS1ub3RpZnk9InRpdGxlIl17CiAgY29sb3I6ICMxNTU3MjQ7Cn0KCmJvZHk+ZGl2W2RhdGEtbm90aWZ5PSJjb250YWluZXIiXS5hbGVydC1kYW5nZXJ7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZDdkYTsKfQoKYm9keT5kaXZbZGF0YS1ub3RpZnk9ImNvbnRhaW5lciJdLmFsZXJ0LWRhbmdlcj5zcGFuW2RhdGEtbm90aWZ5PSJ0aXRsZSJdewogIGNvbG9yOiAjNzIxYzI0Owp9Cgpib2R5PmRpdltkYXRhLW5vdGlmeT0iY29udGFpbmVyIl0uYWxlcnQtd2FybmluZ3sKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmM2NkOwp9Cgpib2R5PmRpdltkYXRhLW5vdGlmeT0iY29udGFpbmVyIl0uYWxlcnQtd2FybmluZz5zcGFuW2RhdGEtbm90aWZ5PSJ0aXRsZSJdewogIGNvbG9yOiAjODU2NDA0Owp9CgoKLyogQ29tcG9uZW50OiBCdXR0b24gKi8KCi5idG4sIC5idG4tZGVmYXVsdCwgLmZpbGUtbG9hZGVyPmxhYmVsIHsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgZm9udC1zaXplOiAxNHB4OwogIGZvbnQtd2VpZ2h0OiA1MDA7CiAgcGFkZGluZzogOHB4IDE2cHg7CiAgbWluLWhlaWdodDogY2FsYygxNnB4ICsgMS40Mjg1NzE0M2VtKTsKICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOwoKICBib3JkZXI6IDA7CiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICBjb2xvcjogJWNvbG9yOlByaW1hcnkgNTAwJTsKICB0ZXh0LXNoYWRvdzogbm9uZTsKICBib3gtc2hhZG93OiBub25lOwogIC13ZWJraXQtYm94LXNoYWRvdzogbm9uZTsKICAKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5idG46aG92ZXIsIC5idG46Zm9jdXMsIC5maWxlLWxvYWRlcj5sYWJlbDpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNTMsMTUzLDE1MywwLjIpOwogIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7CiAgb3V0bGluZTogbm9uZTsKICBjb2xvcjogJWNvbG9yOlByaW1hcnkgNTAwJTsKfQoKLmJ0bjphY3RpdmUsIC5idG46YWN0aXZlOmZvY3VzIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE1MywxNTMsMTUzLDAuNCk7CiAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTsKICBvdXRsaW5lOiBub25lOwogIGJveC1zaGFkb3c6IG5vbmU7CiAgY29sb3I6ICVjb2xvcjpQcmltYXJ5IDUwMCU7Cn0KCi5idG5bZGlzYWJsZWRdIHsgY29sb3I6IHJnYmEoMCwgMCwgMCwgLjI1KTsgfQouYW52aWwtcm9sZS1yYWlzZWQgPiAuYnRuW2Rpc2FibGVkXSwgLmFudmlsLXJvbGUtcHJpbWFyeS1jb2xvciA+IC5idG5bZGlzYWJsZWRdLCAuYW52aWwtcm9sZS1zZWNvbmRhcnktY29sb3IgPiAuYnRuW2Rpc2FibGVkXSB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjEyKSAhaW1wb3J0YW50OwogIGNvbG9yOiByZ2JhKDAsMCwwLDAuMjUpICFpbXBvcnRhbnQ7CiAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50Owp9CgouYW52aWwtcm9sZS1yYWlzZWQgPiAuYnRuLCAuYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yID4gLmJ0biwgLmFudmlsLXJvbGUtc2Vjb25kYXJ5LWNvbG9yID4gLmJ0biwgLmFudmlsLXJvbGUtcmFpc2VkLmZpbGUtbG9hZGVyPmxhYmVsLCAuYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yLmZpbGUtbG9hZGVyPmxhYmVsLCAuYW52aWwtcm9sZS1zZWNvbmRhcnktY29sb3IuZmlsZS1sb2FkZXI+bGFiZWwsCi5idG4tcHJpbWFyeSwgLmJ0bi1zdWNjZXNzLCAuYnRuLWluZm8sIC5idG4td2FybmluZywgLmJ0bi1kYW5nZXIKewogIC8qIDJkcCAqLyAgYm94LXNoYWRvdzogMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDFweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpOwp9CgouYW52aWwtcm9sZS1yYWlzZWQgPiAuYnRuOmFjdGl2ZSwgLmFudmlsLXJvbGUtcHJpbWFyeS1jb2xvciA+IC5idG46YWN0aXZlLCAuYW52aWwtcm9sZS1zZWNvbmRhcnktY29sb3IgPiAuYnRuOmFjdGl2ZSwgLmJ0bi1wcmltYXJ5OmFjdGl2ZSwKLmJ0bi1wcmltYXJ5OmFjdGl2ZSwgLmJ0bi1zdWNjZXNzOmFjdGl2ZSwgLmJ0bi1pbmZvOmFjdGl2ZSwgLmJ0bi13YXJuaW5nOmFjdGl2ZSwgLmJ0bi1kYW5nZXI6YWN0aXZlIHsKICAvKiA4ZHAgKi8gYm94LXNoYWRvdzogMCA4cHggMTBweCAxcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAzcHggMTRweCAycHggcmdiYSgwLCAwLCAwLCAwLjEyKSwgMCA1cHggNXB4IC0zcHggcmdiYSgwLCAwLCAwLCAwLjIpOyAgCiAgdG9wOiAtMXB4Owp9CgouYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yID4gLmJ0biwgLmJ0bi1wcmltYXJ5LCAuYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yLmZpbGUtbG9hZGVyPmxhYmVsIHsKICBjb2xvcjogd2hpdGU7CiAgYmFja2dyb3VuZC1jb2xvcjogJWNvbG9yOlByaW1hcnkgNTAwJTsKfQoKLmFudmlsLXJvbGUtc2Vjb25kYXJ5LWNvbG9yID4gLmJ0biwgLmFudmlsLXJvbGUtc2Vjb25kYXJ5LWNvbG9yLmZpbGUtbG9hZGVyPmxhYmVsIHsKICBjb2xvcjogd2hpdGU7CiAgYmFja2dyb3VuZC1jb2xvcjogJWNvbG9yOlNlY29uZGFyeSA1MDAlOwp9CgouYnRuLXN1Y2Nlc3MsIC5idG4taW5mbywgLmJ0bi13YXJuaW5nLCAuYnRuLWRhbmdlciB7CiAgY29sb3I6IHdoaXRlOwp9CgouYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yID4gLmJ0bjpob3ZlciwgLmFudmlsLXJvbGUtcHJpbWFyeS1jb2xvciA+IC5idG46YWN0aXZlLCAuYW52aWwtcm9sZS1wcmltYXJ5LWNvbG9yID4gLmJ0bjpmb2N1cywKLmJ0bi1wcmltYXJ5OmhvdmVyLCAuYnRuLXByaW1hcnk6YWN0aXZlLCAuYnRuLXByaW1hcnk6Zm9jdXMgewogIGNvbG9yOiB3aGl0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAlY29sb3I6UHJpbWFyeSA3MDAlOwp9CgouYW52aWwtcm9sZS1zZWNvbmRhcnktY29sb3IgPiAuYnRuOmhvdmVyLCAuYW52aWwtcm9sZS1zZWNvbmRhcnktY29sb3IgPiAuYnRuOmFjdGl2ZSwgLmFudmlsLXJvbGUtc2Vjb25kYXJ5LWNvbG9yID4gLmJ0bjpmb2N1cyB7CiAgY29sb3I6IHdoaXRlOwogIGJhY2tncm91bmQtY29sb3I6ICVjb2xvcjpTZWNvbmRhcnkgNzAwJTsKfQoKLyogQ29tcG9uZW50OiBDYXJkICovCgouYW52aWwtcm9sZS1jYXJkIHsKICBvdmVyZmxvdzogaGlkZGVuOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICBwYWRkaW5nOiA4cHggMTJweDsKICAvKiAyZHAgKi8gIGJveC1zaGFkb3c6IDAgMnB4IDJweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKTsKfQoKLyogZnVsbF93aWR0aF9yb3cgc2VjdGlvbnMgZ28gZnVsbCBibGVlZCAqLwouY29sdW1uLXBhbmVsLmFudmlsLXJvbGUtY2FyZCA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uID4gLmFudmlsLXBhbmVsLXNlY3Rpb24tY29udGFpbmVyLmZ1bGwtd2lkdGgtcm93IHsKICBtYXJnaW4tbGVmdDogLTEycHg7CiAgbWFyZ2luLXJpZ2h0OiAtMTJweDsKICB3aWR0aDogaW5pdGlhbDsKICBtYXgtd2lkdGg6IGluaXRpYWw7Cn0KCi8qIElmIHRoZSBmaXJzdCByb3cgb2YgYSBjYXJkIGlzIGEgZnVsbF93aWR0aF9yb3csIGl0IGdvZXMgdG8gdGhlIHRvcCAqLwouY29sdW1uLXBhbmVsLmFudmlsLXJvbGUtY2FyZCA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uOmZpcnN0LWNoaWxkID4gLmFudmlsLXBhbmVsLXNlY3Rpb24tY29udGFpbmVyLmZ1bGwtd2lkdGgtcm93IHsKICBtYXJnaW4tdG9wOiAtOHB4Owp9Ci5jb2x1bW4tcGFuZWwuYW52aWwtcm9sZS1jYXJkID4gLmFudmlsLXBhbmVsLXNlY3Rpb246bGFzdC1jaGlsZCA+IC5hbnZpbC1wYW5lbC1zZWN0aW9uLWNvbnRhaW5lci5mdWxsLXdpZHRoLXJvdyB7CiAgbWFyZ2luLWJvdHRvbTogLThweDsKfQoKCgovKiBDb21wb25lbnQ6IFRleHRCb3ggKyBUZXh0QXJlYSAqLwoKaW5wdXQuYW52aWwtY29tcG9uZW50LCB0ZXh0YXJlYS5hbnZpbC1jb21wb25lbnQsIC5hbnZpbC1jb21wb25lbnQgc2VsZWN0LCAuYW52aWwtZGF0ZXBpY2tlciBpbnB1dCB7CiAgZm9udC1zaXplOiAxNnB4OwogIGxpbmUtaGVpZ2h0OiAxLjU7CiAgYm9yZGVyLXJhZGl1czogMDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKICBjb2xvcjogcmdiYSgwLDAsMCwwLjg3KTsKICAKICBib3gtc2hhZG93OiBub25lOwp9CgouYW52aWwtZHJvcGRvd24gewogIGZvbnQtc2l6ZTogMTZweDsKfQouYW52aWwtY29tcG9uZW50IHNlbGVjdCB7CiAgZm9udC1zaXplOiBpbmhlcml0Owp9CgppbnB1dC5hbnZpbC1jb21wb25lbnQsIC5hbnZpbC1jb21wb25lbnQgc2VsZWN0LCAuYW52aWwtZGF0ZXBpY2tlciBpbnB1dCB7CiAgcGFkZGluZzogOHB4IDAgNHB4OwogIGJvcmRlcjogMDsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjQyKTsKCiAgdHJhbnNpdGlvbjogYm9yZGVyLWJvdHRvbSAwLjJzLCBwYWRkaW5nLWJvdHRvbSAwLjJzOwogIC1tb3otdHJhbnNpdGlvbjogbm9uZTsgLyogRmlyZWZveCBpcyBqdW1weSwgc28gZGlzYWJsZSB0cmFuc2l0aW9ucyAqLwp9Cgp0ZXh0YXJlYS5hbnZpbC1jb21wb25lbnQgewogIHBhZGRpbmc6IDRweCA4cHg7CiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjQyKTsKICBib3JkZXItcmFkaXVzOiAycHg7CiAgdHJhbnNpdGlvbjogYm9yZGVyIDAuMnMsIHBhZGRpbmcgMC4yczsKICAtbW96LXRyYW5zaXRpb246IG5vbmU7IC8qIEZpcmVmb3ggaXMganVtcHksIHNvIGRpc2FibGUgdHJhbnNpdGlvbnMgKi8KfQoKLmFudmlsLWRyb3Bkb3duIHNlbGVjdC5mb3JtLWNvbnRyb2wgewogIAogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7CiAgcGFkZGluZzogOHB4IDJlbSA0cHggMDsKICAKICAvKiBldyBldyBldyAtIHNlbGVjdCBlbGVtZW50cyBhcmUgd2VpcmQgYW5kIGRvbid0IG9iZXkgbGluZS1oZWlnaHQsIHNvIHdlIGp1c3QKICAgICBzZXQgdGhlIGhlaWdodCBleHBsaWNpdGx5LiBVZ2guICovCiAgaGVpZ2h0OiBjYWxjKDEuNWVtICsgMTNweCk7IC8qIDhweCArIDRweCBwYWRkaW5nICsgMXB4IGJvcmRlciA9IDEzcHggKi8KfQoKLmFudmlsLWRyb3Bkb3duIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KLyogU2VsZWN0IGFycm93IHN0eWxpbmcgKi8KLmFudmlsLWRyb3Bkb3duIGZvcm06YmVmb3JlIHsKICAgIGNvbnRlbnQ6ICJcMjVCQyI7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICByaWdodDogMDsKICAgIGZvbnQtc2l6ZTogODAlOwogICAgbGluZS1oZWlnaHQ6IGNhbGMoMS44ZW0gKyA4cHgpOwogICAgY29sb3I6ICM1NTU7CiAgICBwb2ludGVyLWV2ZW50czpub25lOwogICAgcGFkZGluZzogNHB4IDRweDsKfQoKLmFudmlsLWNvbXBvbmVudCBzZWxlY3QsIC5hbnZpbC1kYXRlcGlja2VyIGlucHV0IHsgbWFyZ2luLWJvdHRvbTogNHB4OyB9CmlucHV0LmFudmlsLWNvbXBvbmVudC5hbnZpbC1zcGFjaW5nLWJlbG93LW5vbmUgeyBtYXJnaW4tYm90dG9tOiA0cHg7IH0KaW5wdXQuYW52aWwtY29tcG9uZW50LmFudmlsLXNwYWNpbmctYmVsb3ctc21hbGwgeyBtYXJnaW4tYm90dG9tOiA4cHg7IH0KaW5wdXQuYW52aWwtY29tcG9uZW50LmFudmlsLXNwYWNpbmctYmVsb3ctbWVkaXVtIHsgbWFyZ2luLWJvdHRvbTogMTJweDsgfQppbnB1dC5hbnZpbC1jb21wb25lbnQuYW52aWwtc3BhY2luZy1iZWxvdy1sYXJnZSB7IG1hcmdpbi1ib3R0b206IDIwcHg7IH0KCmlucHV0LmFudmlsLWNvbXBvbmVudDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwgdGV4dGFyZWEuYW52aWwtY29tcG9uZW50Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHsKICBjb2xvcjogcmdiYSgwLDAsMCwwLjU0KTsKfQppbnB1dC5hbnZpbC1jb21wb25lbnQ6Oi1tb3otcGxhY2Vob2xkZXIsIHRleHRhcmVhLmFudmlsLWNvbXBvbmVudDo6LW1vei1wbGFjZWhvbGRlciB7CiAgY29sb3I6IHJnYmEoMCwwLDAsMC41NCk7Cn0KaW5wdXQuYW52aWwtY29tcG9uZW50OjpwbGFjZWhvbGRlciwgdGV4dGFyZWEuYW52aWwtY29tcG9uZW50OjpwbGFjZWhvbGRlciAgewogIGNvbG9yOiByZ2JhKDAsMCwwLDAuNTQpOwp9CgouYXBwLWJhciBpbnB1dC5hbnZpbC1jb21wb25lbnQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIsIC5hcHAtYmFyIHRleHRhcmVhLmFudmlsLWNvbXBvbmVudDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciB7CiAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTsKfQouYXBwLWJhciBpbnB1dC5hbnZpbC1jb21wb25lbnQ6Oi1tb3otcGxhY2Vob2xkZXIsIC5hcHAtYmFyIHRleHRhcmVhLmFudmlsLWNvbXBvbmVudDo6LW1vei1wbGFjZWhvbGRlciB7CiAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTsKfQouYXBwLWJhciBpbnB1dC5hbnZpbC1jb21wb25lbnQ6OnBsYWNlaG9sZGVyLCAuYXBwLWJhciB0ZXh0YXJlYS5hbnZpbC1jb21wb25lbnQ6OnBsYWNlaG9sZGVyICB7CiAgY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMC44KTsKfQoKaW5wdXQuYW52aWwtY29tcG9uZW50OmhvdmVyLCAuYW52aWwtY29tcG9uZW50IHNlbGVjdDpob3ZlciwgLmFudmlsLWRhdGVwaWNrZXIgaW5wdXQ6aG92ZXIgewogIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCByZ2JhKDAsMCwwLC44Nyk7CiAgcGFkZGluZy1ib3R0b206IDNweDsKfQoKaW5wdXQuYW52aWwtY29tcG9uZW50OmZvY3VzLCAuYW52aWwtY29tcG9uZW50IHNlbGVjdDpmb2N1cywgLmFudmlsLWRhdGVwaWNrZXIgaW5wdXQ6Zm9jdXMgewogIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAlY29sb3I6UHJpbWFyeSA3MDAlOwogIHBhZGRpbmctYm90dG9tOiAzcHg7CiAgYm94LXNoYWRvdzogbm9uZTsKfQoKaW5wdXQuYW52aWwtY29tcG9uZW50W2Rpc2FibGVkXSwgLmFudmlsLWNvbXBvbmVudCBzZWxlY3RbZGlzYWJsZWRdLCAuYW52aWwtZGF0ZXBpY2tlciBpbnB1dFtkaXNhYmxlZF0gewogIGJvcmRlci1ib3R0b206IDFweCBkYXNoZWQgIzg4ODsKICBwYWRkaW5nLWJvdHRvbTogNHB4OwogIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50Owp9Cgp0ZXh0YXJlYS5hbnZpbC1jb21wb25lbnQ6aG92ZXIgewogIGJvcmRlcjogMnB4IHNvbGlkIHJnYmEoMCwwLDAsMC44Nyk7CiAgcGFkZGluZzogM3B4IDdweDsKfQoKdGV4dGFyZWEuYW52aWwtY29tcG9uZW50OmZvY3VzIHsKICBib3JkZXI6IDJweCBzb2xpZCAlY29sb3I6UHJpbWFyeSA3MDAlOwogIHBhZGRpbmc6IDNweCA3cHg7CiAgYm94LXNoYWRvdzogbm9uZTsKfQoKdGV4dGFyZWEuYW52aWwtY29tcG9uZW50W2Rpc2FibGVkXSB7CiAgYm9yZGVyOiAxcHggZGFzaGVkICM4ODg7CiAgcGFkZGluZzogNHB4IDhweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsKfQoKLmRhdGVyYW5nZXBpY2tlciB0ZC5hY3RpdmUgewogIGJhY2tncm91bmQtY29sb3I6ICVjb2xvcjpQcmltYXJ5IDUwMCU7Cn0KCi5kYXRlcmFuZ2VwaWNrZXIgdGQuYWN0aXZlOmhvdmVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAlY29sb3I6UHJpbWFyeSA3MDAlOwp9CgouZGF0ZXJhbmdlcGlja2VyIC5idG4tc3VjY2VzcyB7CiAgY29sb3I6ICVjb2xvcjpQcmltYXJ5IDUwMCU7Cn0KCi8qIENvbXBvbmVudDogQ2hlY2tCb3gsIFJhZGlvQnV0dG9uICovCi8qIFVnaC4gVGhlc2UgYXJlIGRlZmluaXRlbHkgVE9ETyByaWdodCBub3cuICovCgouY2hlY2tib3gsIC5yYWRpbyB7CiAgZm9udC1zaXplOiAxNnB4Owp9CgovKiBTaGFkb3cgdmFsdWVzIHRha2VuIGZyb20gCmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwNTMzMDU1L2NhbGN1bGF0aW5nLXNoYWRvdy12YWx1ZXMtZm9yLWFsbC1tYXRlcmlhbC1kZXNpZ24tZWxldmF0aW9ucwoqLwoK,
    id: 2HRVZYMDAHBTMJOJSA2A3J7HS7N3B7FV}
server_modules:
- {name: ServerModule1, code: "import anvil.server\n\nimport pandas as pd\nimport\
    \ matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport\
    \ statsmodels.api as sm\nimport scipy.stats as stats\n\nfrom sklearn.model_selection\
    \ import train_test_split\nfrom sklearn.ensemble import GradientBoostingRegressor\n\
    from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n\
    \ncsv_link = 'https://drive.google.com/file/d/1FUdTrrP8FEutHOMV6mPlgkoLl8yX4bfd/view?usp=sharing'\n\
    \nfile_id = csv_link.split('/')[-2]\n\ndownload_link = f'https://drive.google.com/uc?id={file_id}'\n\
    \ndata = pd.read_csv(download_link)\ndata=data.dropna()\n\n# Our targeted variable\n\
    X = data.drop('price', axis=1)\ny = data['price']\n\nX_train, X_test, y_train,\
    \ y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\ngb_regressor\
    \ = GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3,\
    \ random_state=42)\n\ngb_regressor.fit(X_train, y_train)\n\ny_pred = gb_regressor.predict(X_test)\n\
    \n\ndef get_value(input_col):\n  min_list = [290, 520, 290, 0, 1900, 0, 47.1559,\
    \ -122.387, 399, 651]\n  max_list = [4230, 19141, 3740, 4820, 2015, 2015, 47.7776,\
    \ -121.979, 3660, 17550]\n    \n  bias = 1000000\n  if (input_col['sqft_living']\
    \ > 4000 or input_col['sqft_above'] > 4000):\n    bias *= 4\n  if (input_col['sqft_living']\
    \ > 5000 or input_col['sqft_above'] > 5000):\n    bias *= 12\n  if (input_col['sqft_living']\
    \ > 7000 or input_col['sqft_above'] > 7000):\n    bias *= 2\n    \n  input_col['sqft_living']*=input_col['floors']\n\
    \    \n  label_encoded_values = [int(input_col[col]) - 1 for col in ['floors',\
    \ 'bedrooms', 'bathrooms', 'grade', 'condition']]\n    \n  normalized_values =\
    \ [(input_col[col] - min_val) / (max_val - min_val) for col, min_val, max_val\
    \ in zip(\n        ['sqft_living', 'sqft_lot', 'sqft_above', 'sqft_basement',\
    \ 'yr_built', 'yr_renovated', 'lat', 'long',\n         'sqft_living15', 'sqft_lot15'],\
    \ min_list, max_list)]\n\n  result = label_encoded_values + normalized_values\n\
    \    \n  columns_order = [\n        'bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot',\
    \ 'floors',\n        'condition', 'grade', 'sqft_above', 'sqft_basement', 'yr_built',\n\
    \        'yr_renovated', 'lat', 'long', 'sqft_living15', 'sqft_lot15'\n    ]\n\
    \n  result = [result[columns_order.index(col)] for col in columns_order]\n\n \
    \ result_array = np.array(result).reshape(1, -1)\n  predicted_price = gb_regressor.predict(result_array)\n\
    \    \n    # Adjusting the predicted price within the specified range\n  adjusted_price\
    \ = ((predicted_price * (37207500 - 2475000)) + 2475000 + bias)[0]\n    # Rounding\
    \ to the nearest hundred thousand and converting to int\n  rounded_price = int(round(adjusted_price\
    \ / 100000) * 100000)\n\n  # Formatting the price with commas\n  formatted_price\
    \ = '{:,}'.format(rounded_price)\n\n  return formatted_price\n\n@anvil.server.callable\n\
    def get_estimate(input_col):\n    try:\n        result = get_value(input_col)\n\
    \        return f\"Estimated Value: Rs.{result}\"\n    except Exception as e:\n\
    \        return \"Invalid Data\"\n  \n", id: '170187847925342410861678.4844'}
